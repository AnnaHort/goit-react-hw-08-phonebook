{"version":3,"file":"static/js/770.23416456.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","redux/selectors.js","components/ContactList/ContactList.js","components/QuizForm/QuizForm.styled.js","components/QuizForm/QuizForm.js","components/pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledSearchInput = styled.input`\n padding: 5px;\n margin: 10px 0 10px 10px;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  &:hover,\n  :focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4);\n    border-color: lightgray;\n  }\n  &:hover,\n  &:focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.5);\n    outline: none;\n    &:hover {\n      background-color: lightgray;\n    }\n  }\n`\n\nexport const ListContact = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-left: 20px;\n`\nexport const ListEl = styled.li`\ndisplay: flex;\nalign-items: center;\n`\n\nexport const ContactButton = styled.button`\nmargin-left: 20px;\npadding: 7px;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 5px;\n  &:hover,\n  :focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4);\n    border-color: lightblue;\n  }\n  &:hover,\n  &:focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4);\n    outline: none;\n    &:hover {\n      background-color: lightblue;\n    }\n  }\n`","export const getTasks = state => state.contacts.contacts;// весь зміст стейту\n\nexport const selectItems = state => state.contacts.contacts.items;// масив об'єктів з контактами та даними\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;// стан завантаження\n\nexport const selectError = state => state.contacts.contacts.error;// стан помилки\n\nexport const selectFilter = state => state.contacts.filter;// стан фільтру","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ContactButton,\n  ListContact,\n  ListEl,\n  StyledSearchInput,\n} from './ContactList.styled';\nimport { useEffect } from 'react';\nimport { deleteTask, fetchTasks } from 'redux/operations';\nimport { getTasks, selectFilter } from 'redux/selectors';\nimport { findContact } from 'redux/contactSlice';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  // Отримуємо частини стану\n  const { items, isLoading, error } = useSelector(getTasks);\n\n  // Викликаємо операцію\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  // Операція видалення\n  const handleDelete = item => {\n    dispatch(deleteTask(item.id));\n  };\n\n  // Фільтрація контактів\n  const filteredItems = items.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <StyledSearchInput\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search by name\"\n        value={filter}\n        onChange={e => dispatch(findContact(e.target.value))}\n      />\n      <ListContact>\n        {isLoading ? (\n          <p>Loading...</p>\n        ) : error ? (\n          <p>Error: {error.message}</p>\n        ) : (\n          filteredItems.map(contact => (\n            <ListEl key={contact.id}>\n              <p>{contact.name}</p>\n              <p>{contact.phone}</p>\n              <ContactButton onClick={() => handleDelete(contact)}>\n                Delete\n              </ContactButton>\n            </ListEl>\n          ))\n        )}\n      </ListContact>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\nmargin: 10px 0;\n  width: 500px;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  padding: 20px;\n`;\n\nexport const InputEl = styled.input`\n  padding: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  &:hover,\n  :focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4);\n    border-color: lightgray;\n  }\n  &:hover,\n  &:focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.5);\n    outline: none;\n    &:hover {\n      background-color: lightgray;\n    }\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  width: 200px;\n  margin-bottom: 10px;\n  \n`;\n\nexport const AddContactBtn = styled.button`\n  padding: 7px;\n  background-color: #fff;\n\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 5px;\n  &:hover,\n  :focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4);\n    border-color: lightblue;\n  }\n  &:hover,\n  &:focus {\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4);\n    outline: none;\n    &:hover {\n      background-color: lightblue;\n    }\n  }\n`;\n","import { AddContactBtn, Container, InputEl, StyledForm } from './QuizForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTask } from 'redux/operations';\nimport { selectItems } from 'redux/selectors';\n\n\nexport const QuizForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectItems);\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const newName = form.elements.name.value;\n    const newPhoneNumber = form.elements.contacts.value; \n\n    const contactData = {\n      name: newName,\n      phone: newPhoneNumber,\n    };\n\n    if (contactData.name !== '' && contactData.phone !== '') {\n  \n      const contactExists = items.some(\n        item =>\n        item.name === contactData.name &&\n        item.phone === contactData.phone\n      );\n\n      if (!contactExists) {\n\n        dispatch(addTask(contactData));\n        form.reset();\n      } else {\n        form.reset();\n        alert('This contact already exists in your phonebook.');\n      }\n    } else {\n      \n      alert('Please enter both Name and Number');\n    }\n  };\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <StyledForm onSubmit={handleSubmit}>\n        <ul>\n          <Container>\n            <p>Name:</p>\n            <InputEl\n              name=\"name\"\n              placeholder=\"add new name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            />\n          </Container>\n          <Container>\n            <p>Number:</p>\n            <InputEl\n              name=\"contacts\"\n              placeholder=\"add new number\"\n              pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n            />\n          </Container>\n          <li>\n            <AddContactBtn>Add contact</AddContactBtn>\n          </li>\n        </ul>\n      </StyledForm>\n    </>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { QuizForm } from 'components/QuizForm/QuizForm';\n\n const ContactsPage = () => {\n  return (\n    <>\n      <QuizForm />\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledSearchInput","styled","_templateObject","_taggedTemplateLiteral","ListContact","_templateObject2","ListEl","_templateObject3","ContactButton","_templateObject4","getTasks","state","contacts","selectItems","items","selectFilter","filter","ContactList","dispatch","useDispatch","useSelector","_useSelector","isLoading","error","useEffect","fetchTasks","filteredItems","contact","name","toLowerCase","includes","_jsxs","_Fragment","children","_jsx","type","placeholder","value","onChange","e","findContact","target","message","map","phone","onClick","item","deleteTask","id","StyledForm","InputEl","Container","AddContactBtn","QuizForm","onSubmit","preventDefault","form","contactData","elements","some","reset","alert","addTask","pattern"],"sourceRoot":""}